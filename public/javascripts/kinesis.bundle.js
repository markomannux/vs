!function(e){var n={};function o(t){if(n[t])return n[t].exports;var i=n[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)o.d(t,i,function(n){return e[n]}.bind(null,i));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=60)}({60:function(e,n,o){"use strict";o.r(n);const t="AKIA5ZPII7QRM2KPBDVW",i="ev6ayYq90jc2CIJ15X3JtUIWw9Ks2T8R+ReACQ4v",l="eu-central-1",c={signalingClient:null,peerConnectionByClientId:{},dataChannelByClientId:{},localStream:null,remoteStreams:[],peerConnectionStatsInterval:null};const a={};function r(e){}$("#master-button").click(async()=>{!async function(e,n,o,a){c.localView=e,c.remoteView=n;const r=new AWS.KinesisVideo({region:l,accessKeyId:t,secretAccessKey:i,sessionToken:void 0,endpoint:void 0,correctClockSkew:!0}),s=(await r.describeSignalingChannel({ChannelName:"test-channel"}).promise()).ChannelInfo.ChannelARN;console.log("[MASTER] Channel ARN: ",s);const d=(await r.getSignalingChannelEndpoint({ChannelARN:s,SingleMasterChannelEndpointConfiguration:{Protocols:["WSS","HTTPS"],Role:KVSWebRTC.Role.MASTER}}).promise()).ResourceEndpointList.reduce((e,n)=>(e[n.Protocol]=n.ResourceEndpoint,e),{});console.log("[MASTER] Endpoints: ",d),c.signalingClient=new KVSWebRTC.SignalingClient({channelARN:s,channelEndpoint:d.WSS,role:KVSWebRTC.Role.MASTER,region:l,credentials:{accessKeyId:t,secretAccessKey:i,sessionToken:void 0},systemClockOffset:r.config.systemClockOffset});const g=new AWS.KinesisVideoSignalingChannels({region:l,accessKeyId:t,secretAccessKey:i,sessionToken:void 0,endpoint:d.HTTPS,correctClockSkew:!0}),C=await g.getIceServerConfig({ChannelARN:s}).promise(),S=[];S.push({urls:`stun:stun.kinesisvideo.${l}.amazonaws.com:443`}),C.IceServerList.forEach(e=>S.push({urls:e.Uris,username:e.Username,credential:e.Password})),console.log("[MASTER] ICE servers: ",S);const p={iceServers:S,iceTransportPolicy:"all"},E={video:{width:{ideal:640},height:{ideal:480}},audio:!1};try{c.localStream=await navigator.mediaDevices.getUserMedia(E),e.srcObject=c.localStream}catch(e){console.error("[MASTER] Could not find webcam")}c.signalingClient.on("open",async()=>{console.log("[MASTER] Connected to signaling service")}),c.signalingClient.on("sdpOffer",async(e,t)=>{console.log("[MASTER] Received SDP offer from client: "+t);const i=new RTCPeerConnection(p);c.peerConnectionByClientId[t]=i,c.peerConnectionStatsInterval||(c.peerConnectionStatsInterval=setInterval(()=>i.getStats().then(o),1e3)),i.addEventListener("icecandidate",({candidate:e})=>{e?console.log("[MASTER] Generated ICE candidate for client: "+t):(console.log("[MASTER] All ICE candidates have been generated for client: "+t),console.log("[MASTER] Sending SDP answer to client: "+t),c.signalingClient.sendSdpAnswer(i.localDescription,t))}),i.addEventListener("track",e=>{console.log("[MASTER] Received remote track from client: "+t),n.srcObject||(n.srcObject=e.streams[0])}),c.localStream&&c.localStream.getTracks().forEach(e=>i.addTrack(e,c.localStream)),await i.setRemoteDescription(e),console.log("[MASTER] Creating SDP answer for client: "+t),await i.setLocalDescription(await i.createAnswer({offerToReceiveAudio:!0,offerToReceiveVideo:!0})),console.log("[MASTER] Generating ICE candidates for client: "+t)}),c.signalingClient.on("iceCandidate",async(e,n)=>{console.log("[MASTER] Received ICE candidate from client: "+n);c.peerConnectionByClientId[n].addIceCandidate(e)}),c.signalingClient.on("close",()=>{console.log("[MASTER] Disconnected from signaling channel")}),c.signalingClient.on("error",()=>{console.error("[MASTER] Signaling client error")}),console.log("[MASTER] Starting master connection"),c.signalingClient.open()}($("video")[0],$("video")[1],r)}),$("#stop-master-button").click((function(){console.log("[MASTER] Stopping master connection"),c.signalingClient&&(c.signalingClient.close(),c.signalingClient=null),Object.keys(c.peerConnectionByClientId).forEach(e=>{c.peerConnectionByClientId[e].close()}),c.peerConnectionByClientId=[],c.localStream&&(c.localStream.getTracks().forEach(e=>e.stop()),c.localStream=null),c.remoteStreams.forEach(e=>e.getTracks().forEach(e=>e.stop())),c.remoteStreams=[],c.peerConnectionStatsInterval&&(clearInterval(c.peerConnectionStatsInterval),c.peerConnectionStatsInterval=null),c.localView&&(c.localView.srcObject=null),c.remoteView&&(c.remoteView.srcObject=null),c.dataChannelByClientId&&(c.dataChannelByClientId={})})),$("#viewer-button").click(async()=>{!async function(e,n,o,c){a.localView=e,a.remoteView=n;const r=new AWS.KinesisVideo({region:l,accessKeyId:t,secretAccessKey:i,sessionToken:void 0,endpoint:void 0,correctClockSkew:!0}),s=(await r.describeSignalingChannel({ChannelName:"test-channel"}).promise()).ChannelInfo.ChannelARN;console.log("[VIEWER] Channel ARN: ",s);const d=(await r.getSignalingChannelEndpoint({ChannelARN:s,SingleMasterChannelEndpointConfiguration:{Protocols:["WSS","HTTPS"],Role:KVSWebRTC.Role.VIEWER}}).promise()).ResourceEndpointList.reduce((e,n)=>(e[n.Protocol]=n.ResourceEndpoint,e),{});console.log("[VIEWER] Endpoints: ",d);const g=new AWS.KinesisVideoSignalingChannels({region:l,accessKeyId:t,secretAccessKey:i,sessionToken:void 0,endpoint:d.HTTPS,correctClockSkew:!0}),C=await g.getIceServerConfig({ChannelARN:s}).promise(),S=[];S.push({urls:`stun:stun.kinesisvideo.${l}.amazonaws.com:443`}),C.IceServerList.forEach(e=>S.push({urls:e.Uris,username:e.Username,credential:e.Password})),console.log("[VIEWER] ICE servers: ",S),a.signalingClient=new KVSWebRTC.SignalingClient({channelARN:s,channelEndpoint:d.WSS,clientId:"test-kinesis-client",role:KVSWebRTC.Role.VIEWER,region:l,credentials:{accessKeyId:t,secretAccessKey:i,sessionToken:void 0},systemClockOffset:r.config.systemClockOffset});const p={video:{width:{ideal:640},height:{ideal:480}},audio:!1},E={iceServers:S,iceTransportPolicy:"all"};a.peerConnection=new RTCPeerConnection(E),a.peerConnectionStatsInterval=setInterval(()=>a.peerConnection.getStats().then(o),1e3),a.signalingClient.on("open",async()=>{console.log("[VIEWER] Connected to signaling service");try{a.localStream=await navigator.mediaDevices.getUserMedia(p),a.localStream.getTracks().forEach(e=>a.peerConnection.addTrack(e,a.localStream)),e.srcObject=a.localStream}catch(e){return void console.error("[VIEWER] Could not find webcam")}console.log("[VIEWER] Creating SDP offer"),await a.peerConnection.setLocalDescription(await a.peerConnection.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0})),console.log("[VIEWER] Generating ICE candidates")}),a.signalingClient.on("sdpAnswer",async e=>{console.log("[VIEWER] Received SDP answer"),await a.peerConnection.setRemoteDescription(e)}),a.signalingClient.on("iceCandidate",e=>{console.log("[VIEWER] Received ICE candidate"),a.peerConnection.addIceCandidate(e)}),a.signalingClient.on("close",()=>{console.log("[VIEWER] Disconnected from signaling channel")}),a.signalingClient.on("error",e=>{console.error("[VIEWER] Signaling client error: ",e)}),a.peerConnection.addEventListener("icecandidate",({candidate:e})=>{e?console.log("[VIEWER] Generated ICE candidate"):(console.log("[VIEWER] All ICE candidates have been generated"),console.log("[VIEWER] Sending SDP offer"),a.signalingClient.sendSdpOffer(a.peerConnection.localDescription))}),a.peerConnection.addEventListener("track",e=>{console.log("[VIEWER] Received remote track"),n.srcObject||(a.remoteStream=e.streams[0],n.srcObject=a.remoteStream)}),console.log("[VIEWER] Starting viewer connection"),a.signalingClient.open()}($("video")[0],$("video")[1],r)}),$("#stop-viewer-button").click((function(){console.log("[VIEWER] Stopping viewer connection"),a.signalingClient&&(a.signalingClient.close(),a.signalingClient=null),a.peerConnection&&(a.peerConnection.close(),a.peerConnection=null),a.localStream&&(a.localStream.getTracks().forEach(e=>e.stop()),a.localStream=null),a.remoteStream&&(a.remoteStream.getTracks().forEach(e=>e.stop()),a.remoteStream=null),a.peerConnectionStatsInterval&&(clearInterval(a.peerConnectionStatsInterval),a.peerConnectionStatsInterval=null),a.localView&&(a.localView.srcObject=null),a.remoteView&&(a.remoteView.srcObject=null),a.dataChannel&&(a.dataChannel=null)}))}});